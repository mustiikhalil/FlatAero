// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USER_H_
#define FLATBUFFERS_GENERATED_USER_H_

#include "flatbuffers/flatbuffers.h"

struct User;
struct UserBuilder;

struct User FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UserBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_EMAIL = 8,
    VT_LOGGEDIN = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t age() const {
    return GetField<uint32_t>(VT_AGE, 0);
  }
  const flatbuffers::String *email() const {
    return GetPointer<const flatbuffers::String *>(VT_EMAIL);
  }
  bool loggedIn() const {
    return GetField<uint8_t>(VT_LOGGEDIN, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_AGE) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyField<uint8_t>(verifier, VT_LOGGEDIN) &&
           verifier.EndTable();
  }
};

struct UserBuilder {
  typedef User Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(User::VT_NAME, name);
  }
  void add_age(uint32_t age) {
    fbb_.AddElement<uint32_t>(User::VT_AGE, age, 0);
  }
  void add_email(flatbuffers::Offset<flatbuffers::String> email) {
    fbb_.AddOffset(User::VT_EMAIL, email);
  }
  void add_loggedIn(bool loggedIn) {
    fbb_.AddElement<uint8_t>(User::VT_LOGGEDIN, static_cast<uint8_t>(loggedIn), 0);
  }
  explicit UserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UserBuilder &operator=(const UserBuilder &);
  flatbuffers::Offset<User> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<User>(end);
    return o;
  }
};

inline flatbuffers::Offset<User> CreateUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t age = 0,
    flatbuffers::Offset<flatbuffers::String> email = 0,
    bool loggedIn = false) {
  UserBuilder builder_(_fbb);
  builder_.add_email(email);
  builder_.add_age(age);
  builder_.add_name(name);
  builder_.add_loggedIn(loggedIn);
  return builder_.Finish();
}

inline flatbuffers::Offset<User> CreateUserDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t age = 0,
    const char *email = nullptr,
    bool loggedIn = false) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto email__ = email ? _fbb.CreateString(email) : 0;
  return CreateUser(
      _fbb,
      name__,
      age,
      email__,
      loggedIn);
}

inline const User *GetUser(const void *buf) {
  return flatbuffers::GetRoot<User>(buf);
}

inline const User *GetSizePrefixedUser(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<User>(buf);
}

inline bool VerifyUserBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<User>(nullptr);
}

inline bool VerifySizePrefixedUserBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<User>(nullptr);
}

inline void FinishUserBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<User> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUserBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<User> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_USER_H_
