// automatically generated by the FlatBuffers compiler, do not modify

import FlatBuffers

public struct LogKeys: FlatBufferObject {
  
  static func validateVersion() { FlatBuffersVersion_1_12_0() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table
  
  public static func getRootAsLogKeys(bb: ByteBuffer) -> LogKeys { return LogKeys(Table(bb: bb, position: Int32(bb.read(def: UOffset.self, position: bb.reader)) + Int32(bb.reader))) }
  
  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }
  
  enum VTOFFSET: VOffset {
    case appId = 4
    case encryption = 6
    case appSecret = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }
  
  public var appId: String? { let o = _accessor.offset(VTOFFSET.appId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var appIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.appId.v) }
  public var encryption: String? { let o = _accessor.offset(VTOFFSET.encryption.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var encryptionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.encryption.v) }
  public var appSecret: String? { let o = _accessor.offset(VTOFFSET.appSecret.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var appSecretSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.appSecret.v) }
  public static func startLogKeys(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(appId: Offset<String>, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: appId, at: VTOFFSET.appId.p)  }
  public static func add(encryption: Offset<String>, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: encryption, at: VTOFFSET.encryption.p)  }
  public static func add(appSecret: Offset<String>, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: appSecret, at: VTOFFSET.appSecret.p)  }
  public static func endLogKeys(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset<UOffset> { let end = Offset<UOffset>(offset: fbb.endTable(at: start)); return end }
  public static func createLogKeys(_ fbb: inout FlatBufferBuilder,
                                   offsetOfAppId appId: Offset<String> = Offset(),
                                   offsetOfEncryption encryption: Offset<String> = Offset(),
                                   offsetOfAppSecret appSecret: Offset<String> = Offset()) -> Offset<UOffset> {
    let __start = LogKeys.startLogKeys(&fbb)
    LogKeys.add(appId: appId, &fbb)
    LogKeys.add(encryption: encryption, &fbb)
    LogKeys.add(appSecret: appSecret, &fbb)
    return LogKeys.endLogKeys(&fbb, start: __start)
  }
}

